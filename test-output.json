{
  "meta": { "version": "1.0.0", "format": 20, "date": 1606295252824 },
  "classes": [
    {
      "name": "ClientFiller",
      "description": "A class that gets certain values from a client.",
      "access": "private",
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "client",
            "description": "The client that will be used",
            "type": [[["object"]]]
          }
        ],
        "returns": [[["ClientFiller"]]],
        "meta": {
          "line": 15,
          "file": "ClientFiller.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "client",
          "description": "The client that will be used for the filler.",
          "type": [[["AnyObject"]]],
          "meta": {
            "line": 15,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "get",
          "description": "Gets a client filler from a library.",
          "scope": "static",
          "params": [
            {
              "name": "libraryName",
              "description": "The name of the library to get",
              "type": [[["string"]]]
            },
            {
              "name": "client",
              "description": "The client that the library made",
              "type": [[["object"]]]
            }
          ],
          "returns": [[["ClientFiller"]]],
          "meta": {
            "line": 29,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "meta": { "line": 13, "file": "ClientFiller.ts", "path": "src/Interface" }
    },
    {
      "name": "DiscordIO",
      "description": "Represents the client filler for discord.io clients.",
      "extends": ["ClientFiller"],
      "access": "private",
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "client",
            "description": "The client that will be used",
            "type": [[["object"]]]
          }
        ],
        "returns": [[["DiscordIO"]]],
        "meta": {
          "line": 15,
          "file": "ClientFiller.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "client",
          "description": "The client that will be used for the filler.",
          "type": [[["AnyObject"]]],
          "meta": {
            "line": 15,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "get",
          "description": "Gets a client filler from a library.",
          "scope": "static",
          "params": [
            {
              "name": "libraryName",
              "description": "The name of the library to get",
              "type": [[["string"]]]
            },
            {
              "name": "client",
              "description": "The client that the library made",
              "type": [[["object"]]]
            }
          ],
          "returns": [[["ClientFiller"]]],
          "meta": {
            "line": 29,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "DiscordIO.ts",
        "path": "src/Interface/Clients"
      }
    },
    {
      "name": "DiscordJS",
      "description": "Represents the client filler for discord.js clients.",
      "extends": ["ClientFiller"],
      "access": "private",
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "client",
            "description": "The client that will be used",
            "type": [[["object"]]]
          }
        ],
        "returns": [[["DiscordJS"]]],
        "meta": {
          "line": 15,
          "file": "ClientFiller.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "client",
          "description": "The client that will be used for the filler.",
          "type": [[["AnyObject"]]],
          "meta": {
            "line": 15,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "get",
          "description": "Gets a client filler from a library.",
          "scope": "static",
          "params": [
            {
              "name": "libraryName",
              "description": "The name of the library to get",
              "type": [[["string"]]]
            },
            {
              "name": "client",
              "description": "The client that the library made",
              "type": [[["object"]]]
            }
          ],
          "returns": [[["ClientFiller"]]],
          "meta": {
            "line": 29,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "DiscordJS.ts",
        "path": "src/Interface/Clients"
      }
    },
    {
      "name": "Discordie",
      "description": "Represents the client filler for discordie clients.",
      "extends": ["ClientFiller"],
      "access": "private",
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "client",
            "description": "The client that will be used",
            "type": [[["object"]]]
          }
        ],
        "returns": [[["Discordie"]]],
        "meta": {
          "line": 15,
          "file": "ClientFiller.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "client",
          "description": "The client that will be used for the filler.",
          "type": [[["AnyObject"]]],
          "meta": {
            "line": 15,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "get",
          "description": "Gets a client filler from a library.",
          "scope": "static",
          "params": [
            {
              "name": "libraryName",
              "description": "The name of the library to get",
              "type": [[["string"]]]
            },
            {
              "name": "client",
              "description": "The client that the library made",
              "type": [[["object"]]]
            }
          ],
          "returns": [[["ClientFiller"]]],
          "meta": {
            "line": 29,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "Discordie.ts",
        "path": "src/Interface/Clients"
      }
    },
    {
      "name": "Eris",
      "description": "Represents the client filler for Eris clients.",
      "extends": ["ClientFiller"],
      "access": "private",
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "client",
            "description": "The client that will be used",
            "type": [[["object"]]]
          }
        ],
        "returns": [[["Eris"]]],
        "meta": {
          "line": 15,
          "file": "ClientFiller.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "client",
          "description": "The client that will be used for the filler.",
          "type": [[["AnyObject"]]],
          "meta": {
            "line": 15,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "get",
          "description": "Gets a client filler from a library.",
          "scope": "static",
          "params": [
            {
              "name": "libraryName",
              "description": "The name of the library to get",
              "type": [[["string"]]]
            },
            {
              "name": "client",
              "description": "The client that the library made",
              "type": [[["object"]]]
            }
          ],
          "returns": [[["ClientFiller"]]],
          "meta": {
            "line": 29,
            "file": "ClientFiller.ts",
            "path": "src/Interface"
          }
        }
      ],
      "meta": { "line": 7, "file": "Eris.ts", "path": "src/Interface/Clients" }
    },
    {
      "name": "Arcane",
      "description": "Represents the Arcane Bot Center service.",
      "see": ["https://arcane-center.xyz/documentation\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["Arcane"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 41,
            "file": "Arcane.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": { "line": 8, "file": "Arcane.ts", "path": "src/Interface/Lists" }
    },
    {
      "name": "Blist",
      "description": "Represents the Blist service.",
      "see": ["https://blist.xyz/docs/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["Blist"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 61,
            "file": "Blist.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotVotes",
          "description": "Gets the list of people who voted this bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 69,
            "file": "Blist.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 53,
            "file": "Blist.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getWidgetURL",
          "description": "Gets the widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "type": [[["Query"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 83,
            "file": "Blist.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 34,
            "file": "Blist.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": { "line": 9, "file": "Blist.ts", "path": "src/Interface/Lists" }
    },
    {
      "name": "BotListSpace",
      "description": "Represents the botlist.space service.",
      "see": ["https://docs.botlist.space/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["BotListSpace"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [{ "name": "id", "type": [[["IDResolvable"]]] }],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 58,
            "file": "BotListSpace.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotUptime",
          "description": "Gets the uptime of a bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 79,
            "file": "BotListSpace.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotVotes",
          "description": "Gets the list of people who voted this bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 66,
            "file": "BotListSpace.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBots",
          "description": "Gets a list of bots on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 53,
            "file": "BotListSpace.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getStatistics",
          "description": "Gets the statistics of this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 48,
            "file": "BotListSpace.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "BotListSpace.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUserBots",
          "description": "Gets the user's bots listed for this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 95,
            "file": "BotListSpace.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getWidgetURL",
          "description": "Gets the widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "style",
              "description": "The style of the widget, cannot be zero",
              "default": "1",
              "type": [[["CountResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "default": "{}",
              "type": [[["Query"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 105,
            "file": "BotListSpace.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 37,
            "file": "BotListSpace.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 11,
        "file": "BotListSpace.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "BotsDataBase",
      "description": "Represents the BotsDataBase service.",
      "see": ["https://docs.botsdatabase.com/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["BotsDataBase"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 59,
            "file": "BotsDataBase.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotVotes",
          "description": "Gets the list of people who voted this bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 67,
            "file": "BotsDataBase.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 51,
            "file": "BotsDataBase.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 34,
            "file": "BotsDataBase.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "BotsDataBase.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "BotsForDiscord",
      "description": "Represents the Bots For Discord service.",
      "see": ["https://docs.botsfordiscord.com/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["BotsForDiscord"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 49,
            "file": "BotsForDiscord.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotVotes",
          "description": "Gets the list of people who voted this bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 57,
            "file": "BotsForDiscord.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 65,
            "file": "BotsForDiscord.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUserBots",
          "description": "Gets the user's bots listed for this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 73,
            "file": "BotsForDiscord.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getWidgetURL",
          "description": "Gets the widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 82,
            "file": "BotsForDiscord.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 35,
            "file": "BotsForDiscord.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 9,
        "file": "BotsForDiscord.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "BotsOnDiscord",
      "description": "Represents the Bots On Discord service.",
      "see": ["https://bots.ondiscord.xyz/info/api\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["BotsOnDiscord"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "checkReview",
          "description": "Checks whether or not a user has reviewed a bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "userId",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 50,
            "file": "BotsOnDiscord.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getWidgetURL",
          "description": "Gets the widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 65,
            "file": "BotsOnDiscord.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 35,
            "file": "BotsOnDiscord.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 9,
        "file": "BotsOnDiscord.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "Carbon",
      "description": "Represents the Carbonitex service.",
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["Carbon"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBots",
          "description": "Gets a list of bots on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 43,
            "file": "Carbon.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 33,
            "file": "Carbon.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": { "line": 7, "file": "Carbon.ts", "path": "src/Interface/Lists" }
    },
    {
      "name": "DBLista",
      "description": "Represents the DBLista service.",
      "see": ["https://docs.dblista.pl/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DBLista"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "addBot",
          "description": "Adds a bot to the service.",
          "params": [
            {
              "name": "data",
              "description": "The data being posted. This should include the ID of the bot",
              "type": [[["AnyObject"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 45,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 75,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBots",
          "description": "Gets a list of bots on this service.",
          "params": [
            {
              "name": "page",
              "description": "The page you want to get",
              "default": "0",
              "type": [[["CountResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 83,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getRejectedBots",
          "description": "Gets a list of rejected bots on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 93,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUnverifiedBots",
          "description": "Gets a list of unverified bots on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 88,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "rateBot",
          "description": "Adds a rating to a bot on the service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "data",
              "description": "The data being posted",
              "type": [[["AnyObject"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 102,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "removeBot",
          "description": "Removes a bot from the service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 131,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "removeRating",
          "description": "Removes a rating from a bot on the service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 117,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "search",
          "description": "Searches for bots on the service.",
          "params": [
            {
              "name": "query",
              "description": "The query to search for",
              "type": [[["string"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 145,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "updateBot",
          "description": "Updates the bot's listing with the data provided.",
          "params": [
            {
              "name": "data",
              "description": "The data being posted. This should include the ID of the bot",
              "type": [[["AnyObject"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 60,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "<warn>This service does not support posting.\nThis function is defined to properly return an error if improperly used to post.</warn>",
          "scope": "static",
          "access": "private",
          "returns": [
            [
              ["Promise", "<"],
              ["never", ">"]
            ]
          ],
          "meta": {
            "line": 37,
            "file": "DBLista.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 11,
        "file": "DBLista.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordAppsDev",
      "description": "Represents the Discord Apps service.",
      "see": ["https://discordapps.dev/en-GB/posts/docs/api-v2/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DiscordAppsDev"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getApps",
          "description": "Gets a list of applications on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 50,
            "file": "DiscordAppsDev.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 63,
            "file": "DiscordAppsDev.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBots",
          "description": "Gets a list of bots on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 45,
            "file": "DiscordAppsDev.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getRPCApps",
          "description": "Gets a list of RPC applications on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 55,
            "file": "DiscordAppsDev.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "updateBot",
          "description": "Updates the bot with the data provided.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "data",
              "description": "The data being posted",
              "type": [[["AnyObject"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 72,
            "file": "DiscordAppsDev.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 34,
            "file": "DiscordAppsDev.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "DiscordAppsDev.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordBoats",
      "description": "Represents the Discord Boats service.",
      "see": ["https://discord.boats/api/docs\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DiscordBoats"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 49,
            "file": "DiscordBoats.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 57,
            "file": "DiscordBoats.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getWidgetURL",
          "description": "Gets the widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 78,
            "file": "DiscordBoats.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "userVoted",
          "description": "Checks whether or not a user has voted for a bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "userID",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 66,
            "file": "DiscordBoats.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 35,
            "file": "DiscordBoats.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 9,
        "file": "DiscordBoats.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordBotList",
      "description": "Represents the Discord Bot List service.",
      "see": ["https://discordbotlist.com/api-docs\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DiscordBotList"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 33,
            "file": "DiscordBotList.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "DiscordBotList.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordBotWorld",
      "description": "Represents the Discord Bot World service.",
      "see": ["https://discordbot.world/docs\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DiscordBotWorld"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 53,
            "file": "DiscordBotWorld.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotLikes",
          "description": "Gets the list of people who liked this bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 69,
            "file": "DiscordBotWorld.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotStats",
          "description": "Gets the bot's stats on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 61,
            "file": "DiscordBotWorld.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBots",
          "description": "Gets a list of bots on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 45,
            "file": "DiscordBotWorld.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 82,
            "file": "DiscordBotWorld.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 34,
            "file": "DiscordBotWorld.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "DiscordBotWorld.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordBotsCo",
      "description": "Represents the DiscordBots.co service.",
      "see": ["https://discordbots.co/api\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DiscordBotsCo"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 55,
            "file": "DiscordBotsCo.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 33,
            "file": "DiscordBotsCo.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "DiscordBotsCo.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordBotsGG",
      "description": "Represents the Discord Bots service.",
      "see": ["https://discord.bots.gg/docs\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          },
          {
            "name": "userAgent",
            "description": "The user agent options of the service. Providing this is highly recommended.",
            "optional": true,
            "type": [[["DiscordBotsGGUserAgent"]]]
          }
        ],
        "returns": [[["DiscordBotsGG"]]],
        "meta": {
          "line": 20,
          "file": "DiscordBotsGG.ts",
          "path": "src/Interface/Lists"
        }
      },
      "props": [
        {
          "name": "agent",
          "description": "The user agent options for this service",
          "access": "private",
          "type": [[["DiscordBotsGGUserAgent"]]],
          "meta": {
            "line": 20,
            "file": "DiscordBotsGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "sanitized",
              "description": "Whether to sanitize descriptions",
              "default": "false",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 92,
            "file": "DiscordBotsGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBots",
          "description": "Gets a list of bots on this service.",
          "params": [
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 109,
            "file": "DiscordBotsGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 68,
            "file": "DiscordBotsGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "userAgent",
          "description": "Creates a compliant user agent to use for any API calls to Discord Bots.",
          "scope": "static",
          "params": [
            {
              "name": "botID",
              "description": "The ID of the bot that the agent will be identified with",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "library",
              "description": "The library the agent is using",
              "default": "\"unknown\"",
              "type": [[["string"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 60,
            "file": "DiscordBotsGG.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 18,
        "file": "DiscordBotsGG.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordExtremeList",
      "description": "Represents the Discord Extreme List service.",
      "see": ["https://docs.discordextremelist.xyz/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DiscordExtremeList"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 60,
            "file": "DiscordExtremeList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getStatistics",
          "description": "Gets the statistics of this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 47,
            "file": "DiscordExtremeList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 73,
            "file": "DiscordExtremeList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 33,
            "file": "DiscordExtremeList.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "DiscordExtremeList.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordLabs",
      "description": "Represents the Discord Labs service.",
      "see": ["https://docs.discordlabs.org/docs/api/api\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DiscordLabs"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 55,
            "file": "DiscordLabs.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 33,
            "file": "DiscordLabs.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "DiscordLabs.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordListology",
      "description": "Represents the DiscordListology service.",
      "see": ["https://discordlistology.com/developer/documentation\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DiscordListology"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBotStats",
          "description": "Gets the bot's stats listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 52,
            "file": "DiscordListology.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getGuildStats",
          "description": "Gets the guild's stats listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The guild's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 69,
            "file": "DiscordListology.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "userVotedBot",
          "description": "Checks whether or not a user has voted for a bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "userID",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 61,
            "file": "DiscordListology.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "userVotedGuild",
          "description": "Checks whether or not a user has voted for a guild on this service.",
          "params": [
            {
              "name": "id",
              "description": "The guild's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "userID",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 78,
            "file": "DiscordListology.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 33,
            "file": "DiscordListology.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "DiscordListology.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "DiscordServices",
      "description": "Represents the Discord Services service.",
      "see": ["https://discordservices.net/docs/api\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["DiscordServices"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "postCommands",
          "description": "Posts commands info to your bot page",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "commands",
              "description": "The command info to post",
              "type": [
                [
                  ["Array", "<"],
                  ["DiscordServicesCommandInfo", ">"]
                ]
              ]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 84,
            "file": "DiscordServices.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "postNews",
          "description": "Posts news to your bot page",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "title",
              "description": "The title of the post",
              "type": [[["string"]]]
            },
            {
              "name": "content",
              "description": "The content of the post",
              "type": [[["string"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 66,
            "file": "DiscordServices.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 45,
            "file": "DiscordServices.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 20,
        "file": "DiscordServices.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "GlennBotList",
      "description": "Represents the Glenn Bot List service.",
      "see": ["https://docs.glennbotlist.xyz/"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["GlennBotList"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 55,
            "file": "GlennBotList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotVotes",
          "description": "Gets the list of people who voted this bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 63,
            "file": "GlennBotList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Get a user's profile listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 76,
            "file": "GlennBotList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getWidgetURL",
          "description": "Gets the widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 85,
            "file": "GlennBotList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 38,
            "file": "GlennBotList.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 13,
        "file": "GlennBotList.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "LBots",
      "description": "Represents the LBots service.",
      "see": ["https://lbots.org/api/docs\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["LBots"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBotFavorites",
          "description": "Gets the list of people who favorited this bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 66,
            "file": "LBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getPanelGuildSettings",
          "description": "Gets a guilds settings from the bot's panel.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "guildID",
              "description": "The guild's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 110,
            "file": "LBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "invalidate",
          "description": "Invalidates the token being used in the request.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 53,
            "file": "LBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "updatePanelGuildSettings",
          "description": "Gets a guilds settings from the bot's panel.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "guildID",
              "description": "The guild's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "data",
              "description": "The data being posted",
              "type": [[["AnyObject"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 125,
            "file": "LBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "updatePanelGuilds",
          "description": "Updates the guilds on the bot's panel.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "data",
              "description": "The data being posted",
              "type": [[["AnyObject"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 94,
            "file": "LBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "userFavorited",
          "description": "Checks whether or not a user has favorited a bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "userID",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 80,
            "file": "LBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 33,
            "file": "LBots.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": { "line": 8, "file": "LBots.ts", "path": "src/Interface/Lists" }
    },
    {
      "name": "ListMyBots",
      "description": "Represents the List My Bots service.",
      "see": ["https://listmybots.com/docs/api\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["ListMyBots"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 49,
            "file": "ListMyBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getStatusWidgetURL",
          "description": "Gets the status widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 58,
            "file": "ListMyBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 66,
            "file": "ListMyBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUserBots",
          "description": "Gets the info about someone's bots.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 74,
            "file": "ListMyBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getWidgetURL",
          "description": "Gets the widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 83,
            "file": "ListMyBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 35,
            "file": "ListMyBots.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 9,
        "file": "ListMyBots.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "MythicalBots",
      "description": "Represents the Mythical Bots service.",
      "see": ["https://docs.mythicalbots.xyz/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["MythicalBots"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 49,
            "file": "MythicalBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 57,
            "file": "MythicalBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getWidgetURL",
          "description": "Gets the widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 66,
            "file": "MythicalBots.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 35,
            "file": "MythicalBots.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 9,
        "file": "MythicalBots.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "SpaceBotsList",
      "description": "Represents the Space Bots List service.",
      "see": ["https://spacebots.gitbook.io/tutorial-en/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["SpaceBotsList"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 51,
            "file": "SpaceBotsList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 34,
            "file": "SpaceBotsList.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "SpaceBotsList.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "TopCord",
      "description": "Represents the TopCord service.",
      "see": ["https://docs.topcord.xyz/#/API\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["TopCord"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 52,
            "file": "TopCord.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 33,
            "file": "TopCord.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": { "line": 8, "file": "TopCord.ts", "path": "src/Interface/Lists" }
    },
    {
      "name": "TopGG",
      "description": "Represents the Top.gg service.",
      "see": ["https://top.gg/api/docs\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["TopGG"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 70,
            "file": "TopGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotStats",
          "description": "Gets the bot's stats listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 78,
            "file": "TopGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotVotes",
          "description": "Gets the list of people who voted this bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "TopGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBots",
          "description": "Gets the list of bots on this service.",
          "params": [
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "type": [[["Query"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 62,
            "file": "TopGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 54,
            "file": "TopGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getWidgetURL",
          "description": "Gets the widget URL for this bot.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "optional": true,
              "type": [[["Query"]]]
            },
            {
              "name": "smallWidget",
              "description": "The sub-path name to turn the widget into a badge (i.e. owner)",
              "optional": true,
              "type": [[["undefined", " | "], ["string"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": {
            "line": 109,
            "file": "TopGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "userVoted",
          "description": "Checks whether or not a user has voted for a bot on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            },
            {
              "name": "userID",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 96,
            "file": "TopGG.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 34,
            "file": "TopGG.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": { "line": 9, "file": "TopGG.ts", "path": "src/Interface/Lists" }
    },
    {
      "name": "WonderBotList",
      "description": "Represents the Wonder Bot List service.",
      "see": ["https://api.wonderbotlist.com/en/\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["WonderBotList"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 49,
            "file": "WonderBotList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUser",
          "description": "Gets the user listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 62,
            "file": "WonderBotList.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 33,
            "file": "WonderBotList.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": {
        "line": 8,
        "file": "WonderBotList.ts",
        "path": "src/Interface/Lists"
      }
    },
    {
      "name": "YABL",
      "description": "Represents the YABL service.",
      "see": ["https://yabl.xyz/api\n"],
      "extends": ["ServiceBase"],
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["YABL"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getBot",
          "description": "Gets the bot listed on this service.",
          "params": [
            {
              "name": "id",
              "description": "The bot's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 59,
            "file": "YABL.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBots",
          "description": "Gets a list of bots on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 77,
            "file": "YABL.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getBotsByPage",
          "description": "Gets a page of bots on this service.",
          "params": [
            {
              "name": "query",
              "description": "The query string that will be used in the request",
              "type": [[["Query"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 90,
            "file": "YABL.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getRandomBots",
          "description": "Gets 20 random bots from this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 64,
            "file": "YABL.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUnverifiedBots",
          "description": "Gets a list of unverified bots on this service.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 95,
            "file": "YABL.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "getUserBots",
          "description": "Gets the user's bots listed for this service.",
          "params": [
            {
              "name": "id",
              "description": "The user's ID",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 72,
            "file": "YABL.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "invalidate",
          "description": "Invalidates the token being used in the request.",
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 46,
            "file": "YABL.ts",
            "path": "src/Interface/Lists"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "description": "Posts statistics to this service.\n<warn>Shard data posting is not supported for this service.</warn>",
          "scope": "static",
          "params": [
            {
              "name": "options",
              "description": "The options of the request",
              "type": [[["ServiceBasePostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 35,
            "file": "YABL.ts",
            "path": "src/Interface/Lists"
          }
        }
      ],
      "meta": { "line": 9, "file": "YABL.ts", "path": "src/Interface/Lists" }
    },
    {
      "name": "Poster",
      "description": "A class that posts server count to listing site(s).",
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "options",
            "description": "The options needed to construct the poster",
            "type": [[["PosterOptions"]]]
          }
        ],
        "returns": [[["Poster"]]],
        "meta": { "line": 43, "file": "Poster.ts", "path": "src/Interface" }
      },
      "props": [
        {
          "name": "_clientFiller",
          "description": "The client filler used in the poster",
          "access": "private",
          "type": [[["ClientFiller", " | "], ["null"]]],
          "meta": { "line": 40, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "_interval",
          "description": "Interval that posts to all services",
          "access": "private",
          "type": [[["NodeJS", "."], ["Timeout"]]],
          "meta": { "line": 43, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "apiKeys",
          "description": "The API keys that the poster is using",
          "type": [
            [
              ["Record", "<"],
              ["Service", ", "],
              ["string", ">"]
            ]
          ],
          "meta": { "line": 31, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "client",
          "description": "The client that will be used to fetch the stats",
          "type": [
            [
              ["PosterOptions", "["],
              ["'client'", "]"]
            ]
          ],
          "meta": { "line": 25, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "customServices",
          "description": "An array of custom services that the poster uses",
          "type": [
            [
              ["Array", "<"],
              ["CustomService", ">"]
            ]
          ],
          "meta": { "line": 28, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "handlers",
          "description": "The list of event handlers for every custom event",
          "type": [
            [
              ["Record", "<"],
              ["CustomEvent", ", "],
              ["Array", "<"],
              ["eventHandler", ">>"]
            ]
          ],
          "meta": { "line": 37, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "options",
          "description": "The options the poster was built with",
          "readonly": true,
          "type": [[["PosterOptions"]]],
          "meta": { "line": 34, "file": "Poster.ts", "path": "src/Interface" }
        }
      ],
      "methods": [
        {
          "name": "addHandler",
          "description": "Adds an handler for an event.",
          "params": [
            {
              "name": "event",
              "description": "The name of the event to add the handler to",
              "type": [[["CustomEvent"]]]
            },
            {
              "name": "handler",
              "description": "The function that is run with the event",
              "type": [[["eventHandler"]]]
            }
          ],
          "returns": [
            [
              ["Array", "<"],
              ["eventHandler", ">"]
            ]
          ],
          "returnsDescription": "The array of handlers currently set for that event\n",
          "meta": { "line": 278, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "getServerCount",
          "description": "Retrieves the current server count of the client/shard.",
          "returns": [
            [
              ["Promise", "<"],
              ["number", ">"]
            ]
          ],
          "returnsDescription": "Amount of servers the client/shard is in\n",
          "meta": { "line": 92, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "getService",
          "description": "Gets a service, autofilling its API key if the poster has it.",
          "params": [
            {
              "name": "service",
              "description": "The service to get",
              "type": [[["Service"]]]
            }
          ],
          "returns": [
            [["ServiceBase", " | "], ["CustomService", " | "], ["undefined"]]
          ],
          "meta": { "line": 163, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "getUserCount",
          "description": "Retrieves the current user count of the client/shard.",
          "returns": [
            [
              ["Promise", "<"],
              ["number", ">"]
            ]
          ],
          "returnsDescription": "Amount of users the client/shard is connected with\n",
          "meta": { "line": 109, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "getVoiceConnections",
          "description": "Retrieves the current voice connection count of the client/shard.",
          "returns": [
            [
              ["Promise", "<"],
              ["number", ">"]
            ]
          ],
          "returnsDescription": "Number of active voice connections\n",
          "meta": { "line": 126, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "post",
          "description": "Posts the current clients server count to a service.",
          "see": ["Poster#postManual"],
          "examples": [],
          "emits": [],
          "params": [
            {
              "name": "service",
              "description": "The service to post to",
              "default": "\"all\"",
              "type": [[["Service", " | "], ["'all'"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["object", " | "],
              ["Array", "<"],
              ["object", ">>"]
            ]
          ],
          "returnsDescription": "The result(s) of the post\n",
          "meta": { "line": 182, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "postManual",
          "description": "Manually posts a server count to a service.",
          "params": [
            {
              "name": "service",
              "description": "The service to post to",
              "type": [[["Service", " | "], ["'all'"]]]
            },
            {
              "name": "counts",
              "description": "An object containing the tallies of servers, users and voice connections",
              "type": [[["manualPostOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["object", " | "],
              ["Array", "<"],
              ["object", ">>"]
            ]
          ],
          "returnsDescription": "The result(s) of the post\n",
          "meta": { "line": 199, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "removeHandler",
          "description": "Removes an handler for an event.",
          "params": [
            {
              "name": "event",
              "description": "The name of the event to remove the handler from",
              "type": [[["CustomEvent"]]]
            },
            {
              "name": "handler",
              "description": "The function that is run with the event",
              "type": [[["eventHandler"]]]
            }
          ],
          "returns": [
            [
              ["Array", "<"],
              ["eventHandler", ">"]
            ]
          ],
          "returnsDescription": "The array of handlers currently set for that event\n",
          "meta": { "line": 294, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "runHandlers",
          "description": "Manually triggers an event with custom arguments.",
          "params": [
            {
              "name": "event",
              "description": "The name of the event to run the handlers for",
              "type": [[["CustomEvent"]]]
            },
            {
              "name": "args",
              "description": "The arguments to pass to the handlers",
              "type": [
                [
                  ["Array", "<"],
                  ["any", ">"]
                ]
              ]
            }
          ],
          "returns": [[["void"]]],
          "meta": { "line": 310, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "startInterval",
          "description": "Creates an interval that posts to all services.",
          "params": [
            {
              "name": "interval",
              "description": "The time (in ms) to reach to post to all {@link Service}s again",
              "default": "1800000",
              "type": [[["number"]]]
            }
          ],
          "returns": [[["Timeout"]]],
          "returnsDescription": "The interval that is responsible for posting\n",
          "meta": { "line": 144, "file": "Poster.ts", "path": "src/Interface" }
        },
        {
          "name": "stopInterval",
          "description": "Destroys the current interval.",
          "returns": [[["void"]]],
          "meta": { "line": 155, "file": "Poster.ts", "path": "src/Interface" }
        }
      ],
      "events": [
        {
          "name": "autopost",
          "description": "Emitted when the interval has ran.",
          "see": [],
          "examples": [],
          "emits": [],
          "params": [
            {
              "name": "result",
              "description": "The result(s) of the post",
              "type": [
                [
                  ["object", " | "],
                  ["Array", "<"],
                  ["object", ">"]
                ]
              ]
            }
          ],
          "returns": [[["void"]]],
          "meta": { "line": 137, "file": "Constants.ts", "path": "src/Utils" }
        },
        {
          "name": "autopostfail",
          "description": "Emitted when the interval failed to post.",
          "see": [],
          "examples": [],
          "emits": [],
          "params": [
            {
              "name": "result",
              "description": "The error(s) of the post",
              "type": [
                [
                  ["object", " | "],
                  ["Array", "<"],
                  ["object", ">"]
                ]
              ]
            }
          ],
          "returns": [[["void"]]],
          "meta": { "line": 145, "file": "Constants.ts", "path": "src/Utils" }
        },
        {
          "name": "post",
          "description": "Emitted when a post succeeds.",
          "see": [],
          "examples": [],
          "emits": [],
          "params": [
            {
              "name": "result",
              "description": "The result of the post",
              "type": [[["object"]]]
            }
          ],
          "returns": [[["void"]]],
          "meta": { "line": 153, "file": "Constants.ts", "path": "src/Utils" }
        },
        {
          "name": "postfail",
          "description": "Emitted when a post fails.",
          "see": [],
          "examples": [],
          "emits": [],
          "params": [
            {
              "name": "result",
              "description": "The error of the post",
              "type": [[["object"]]]
            }
          ],
          "returns": [[["void"]]],
          "meta": { "line": 161, "file": "Constants.ts", "path": "src/Utils" }
        }
      ],
      "meta": { "line": 22, "file": "Poster.ts", "path": "src/Interface" }
    },
    {
      "name": "ServiceBase",
      "description": "Represents a basic service.",
      "construct": {
        "name": "constructor",
        "params": [
          {
            "name": "token",
            "description": "The token/key for the service",
            "type": [[["string"]]]
          }
        ],
        "returns": [[["ServiceBase"]]],
        "meta": {
          "line": 46,
          "file": "ServiceBase.ts",
          "path": "src/Interface"
        }
      },
      "props": [
        {
          "name": "token",
          "description": "The token that will be used for the service.",
          "access": "private",
          "type": [[["string"]]],
          "meta": {
            "line": 46,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "methods": [
        {
          "name": "_appendQuery",
          "description": "Appends query string to a URL.",
          "access": "private",
          "params": [
            {
              "name": "url",
              "description": "The URL to modify",
              "type": [[["string"]]]
            },
            {
              "name": "query",
              "description": "The query to append",
              "type": [[["Query"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to prepend the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [[["string"]]],
          "returnsDescription": "The modified URL",
          "meta": {
            "line": 132,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_request",
          "description": "Sends a request for the service interface.",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "options",
              "description": "The options of this request",
              "default": "{}",
              "type": [[["ServiceBaseRequestOptions"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 112,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "_post",
          "description": "Posts statistics to this service.\nInternally, this is supposed to be used in extended classes.",
          "scope": "static",
          "access": "private",
          "params": [
            {
              "name": "form",
              "description": "The request form",
              "type": [[["RequestForm"]]]
            },
            {
              "name": "appendBaseURL",
              "description": "Whether to append the service's base API url",
              "default": "true",
              "type": [[["boolean"]]]
            }
          ],
          "returns": [
            [
              ["Promise", "<"],
              ["AxiosResponse", "<"],
              ["any", ">>"]
            ]
          ],
          "meta": {
            "line": 98,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "get",
          "description": "Gets a service from a key.",
          "scope": "static",
          "params": [
            {
              "name": "key",
              "description": "The name of the service to get",
              "type": [[["string"]]]
            },
            {
              "name": "extras",
              "description": "An array of {@link CustomService}s to include",
              "default": "[]",
              "type": [
                [
                  ["Array", "<"],
                  ["CustomService", ">"]
                ]
              ]
            }
          ],
          "returns": [[["typeof", " "], ["ServiceBase", " | "], ["null"]]],
          "meta": {
            "line": 65,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "getAll",
          "description": "Gets every loaded service.",
          "scope": "static",
          "returns": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["ServiceBase", ">"]
            ]
          ],
          "meta": {
            "line": 87,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        },
        {
          "name": "post",
          "scope": "static",
          "params": [
            { "name": "options", "type": [[["ServiceBasePostOptions"]]] }
          ],
          "returns": [
            [
              ["ReturnType", "<"],
              ["typeof", " "],
              ["ServiceBase", "["],
              ["'", "_"],
              ["post'", "]>"]
            ]
          ],
          "meta": {
            "line": 170,
            "file": "ServiceBase.ts",
            "path": "src/Interface"
          }
        }
      ],
      "meta": { "line": 41, "file": "ServiceBase.ts", "path": "src/Interface" }
    },
    {
      "name": "DBotsError",
      "description": "Extend an error of some sort into a DBotsError.",
      "see": [],
      "extends": ["Error"],
      "access": "private",
      "construct": {
        "name": "constructor",
        "returns": [[["DBotsError"]]],
        "meta": { "line": 16, "file": "DBotsError.ts", "path": "src/Utils" }
      },
      "props": [
        {
          "name": "code",
          "type": [[["string"]]],
          "meta": { "line": 16, "file": "DBotsError.ts", "path": "src/Utils" }
        },
        {
          "name": "message",
          "type": [[["string"]]],
          "meta": {
            "line": 974,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib"
          }
        },
        {
          "name": "name",
          "type": [[["string"]]],
          "meta": { "line": 15, "file": "DBotsError.ts", "path": "src/Utils" }
        },
        {
          "name": "stack",
          "type": [[["undefined", " | "], ["string"]]],
          "meta": {
            "line": 975,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib"
          }
        },
        {
          "name": "Error",
          "scope": "static",
          "type": [[["ErrorConstructor"]]],
          "meta": {
            "line": 984,
            "file": "lib.es5.d.ts",
            "path": "node_modules/typescript/lib"
          }
        }
      ],
      "meta": { "line": 14, "file": "DBotsError.ts", "path": "src/Utils" }
    },
    {
      "name": "Util",
      "description": "Contains various general-purpose utility methods.",
      "construct": {
        "name": "constructor",
        "returns": [[["Util"]]],
        "meta": { "line": 30, "file": "Util.ts", "path": "src/Utils" }
      },
      "methods": [
        {
          "name": "resolveCount",
          "description": "Resolves data into a countable number that is finite and positive.",
          "scope": "static",
          "params": [
            {
              "name": "data",
              "description": "The data to resolve",
              "type": [[["CountResolvable"]]]
            }
          ],
          "returns": [[["number"]]],
          "meta": { "line": 63, "file": "Util.ts", "path": "src/Utils" }
        },
        {
          "name": "resolveID",
          "description": "Resolves data into a Discord ID.",
          "scope": "static",
          "params": [
            {
              "name": "data",
              "description": "The data to resolve",
              "type": [[["IDResolvable"]]]
            }
          ],
          "returns": [[["string"]]],
          "meta": { "line": 39, "file": "Util.ts", "path": "src/Utils" }
        }
      ],
      "meta": { "line": 30, "file": "Util.ts", "path": "src/Utils" }
    }
  ],
  "typedefs": [
    {
      "name": "DiscordBotsGGUserAgent",
      "description": "The user agent used options for the DiscordBotsGG service",
      "meta": {
        "line": 6,
        "file": "DiscordBotsGG.ts",
        "path": "src/Interface/Lists"
      },
      "props": [
        {
          "name": "clientID",
          "description": "The bot ID for the user agent",
          "type": [[["string"]]]
        },
        {
          "name": "library",
          "description": "The bot's library",
          "type": [[["string"]]]
        }
      ]
    },
    {
      "name": "DiscordServicesCommandInfo",
      "description": "The options to use when posting command info for the DiscordServices service",
      "meta": {
        "line": 5,
        "file": "DiscordServices.ts",
        "path": "src/Interface/Lists"
      },
      "props": [
        {
          "name": "category",
          "description": "The category of your command",
          "type": [[["string"]]]
        },
        {
          "name": "command",
          "description": "The command name including the prefix",
          "type": [[["string"]]]
        },
        {
          "name": "desc",
          "description": "The description for your command",
          "type": [[["string"]]]
        }
      ]
    },
    {
      "name": "manualPostOptions",
      "meta": { "line": 10, "file": "Poster.ts", "path": "src/Interface" },
      "props": [
        {
          "name": "serverCount",
          "description": "The server count to post to the service",
          "type": [[["number"]]]
        },
        {
          "name": "userCount",
          "description": "The user count to post to the service",
          "optional": true,
          "type": [[["undefined", " | "], ["number"]]]
        },
        {
          "name": "voiceConnections",
          "description": "The voice connection count to post to the service",
          "optional": true,
          "type": [[["undefined", " | "], ["number"]]]
        }
      ]
    },
    {
      "name": "ServiceBasePostOptions",
      "description": "Options provided when posting to a service",
      "meta": { "line": 20, "file": "ServiceBase.ts", "path": "src/Interface" },
      "props": [
        {
          "name": "clientID",
          "description": "The client ID that the request will post for",
          "type": [[["IDResolvable"]]]
        },
        {
          "name": "serverCount",
          "description": "The amount of servers that the client is in",
          "type": [[["CountResolvable"]]]
        },
        {
          "name": "shard",
          "description": "The shard the request is representing",
          "optional": true,
          "type": [[["Shard"]]]
        },
        {
          "name": "token",
          "description": "The Authorization token for the request",
          "type": [[["string"]]]
        },
        {
          "name": "userCount",
          "description": "The amount of users that the client cached",
          "type": [[["CountResolvable"]]]
        },
        {
          "name": "voiceConnections",
          "description": "The number of voice connections",
          "optional": true,
          "type": [[["CountResolvable"]]]
        }
      ]
    },
    {
      "name": "ServiceBaseRequestOptions",
      "description": "Options provided when sending a service request",
      "meta": { "line": 11, "file": "ServiceBase.ts", "path": "src/Interface" },
      "props": [
        {
          "name": "appendBaseURL",
          "description": "Whether to prepend the service's base API url",
          "optional": true,
          "type": [[["undefined", " | "], ["false", " | "], ["true"]]]
        },
        {
          "name": "requiresToken",
          "description": "Whether the request requires a token",
          "optional": true,
          "type": [[["undefined", " | "], ["false", " | "], ["true"]]]
        }
      ]
    },
    {
      "name": "PostRequestData",
      "description": "The object that is given to {@link ServiceBase}s and {@link CustomService}s in order to send requests to them.",
      "meta": { "line": 55, "file": "Constants.ts", "path": "src/Utils" },
      "props": [
        {
          "name": "clientID",
          "description": "The client ID that the request will post for",
          "optional": true,
          "type": [[["undefined", " | "], ["string"]]]
        },
        {
          "name": "serverCount",
          "description": "The amount of servers that the client is in",
          "optional": true,
          "type": [[["undefined", " | "], ["number"]]]
        },
        {
          "name": "shard",
          "description": "The shard the request is representing",
          "optional": true,
          "type": [[["Shard"]]]
        },
        {
          "name": "token",
          "description": "The Authorization token for the request",
          "type": [[["string"]]]
        },
        {
          "name": "userCount",
          "description": "The amount of users that the client cached",
          "optional": true,
          "type": [[["undefined", " | "], ["number"]]]
        },
        {
          "name": "voiceConnections",
          "description": "The amount of voice connections the client has",
          "optional": true,
          "type": [[["undefined", " | "], ["number"]]]
        }
      ]
    },
    {
      "name": "PosterOptions",
      "description": "Options for a poster.",
      "meta": { "line": 4, "file": "Constants.ts", "path": "src/Utils" },
      "props": [
        {
          "name": "apiKeys",
          "description": "An object that pairs a {@link Service} with their token",
          "optional": true,
          "type": [
            [
              ["Record", "<"],
              ["Service", ", "],
              ["string", ">"]
            ]
          ]
        },
        {
          "name": "client",
          "description": "The client that a supported {@link Library} uses to manage the Discord application.\nRequires {@link #clientLibrary} to be present",
          "optional": true,
          "type": [[["undefined", " | "], ["object"]]]
        },
        {
          "name": "clientID",
          "description": "The client ID used for posting to a {@link Service}.\nAutomatically filled in when {@link #client} is present",
          "optional": true,
          "type": [[["undefined", " | "], ["string"]]]
        },
        {
          "name": "clientLibrary",
          "description": "The library that the client is based on",
          "optional": true,
          "type": [[["Library"]]]
        },
        {
          "name": "customServices",
          "description": "The custom services that the poster will use",
          "optional": true,
          "type": [
            [
              ["Array", "<"],
              ["CustomService", ">"]
            ]
          ]
        },
        {
          "name": "post",
          "description": "The function to use when posting to a server that uses the client ID, the amount of servers, and a {@link Shard}.\nThis will be used when the {@link Service} is `custom`",
          "optional": true,
          "type": [
            [
              ["PromiseResolvable", "<"],
              ["void", ">"]
            ]
          ]
        },
        {
          "name": "serverCount",
          "description": "The function to use when retrieving the amount of servers a client/shard is in, using the client as a parameter",
          "optional": true,
          "type": [
            [
              ["PromiseResolvable", "<"],
              ["number", ">"]
            ]
          ]
        },
        {
          "name": "shard",
          "description": "The shard data for using different methods of posting to services",
          "optional": true,
          "type": [[["Shard"]]]
        },
        {
          "name": "useSharding",
          "description": "Whether or not to use a {@link ServiceBase}s sharding methods when posting",
          "optional": true,
          "type": [[["undefined", " | "], ["false", " | "], ["true"]]]
        },
        {
          "name": "userCount",
          "description": "The function to use when retrieving the amount of users a client/shard is connected with, using the client as a parameter",
          "optional": true,
          "type": [
            [
              ["PromiseResolvable", "<"],
              ["number", ">"]
            ]
          ]
        },
        {
          "name": "voiceConnections",
          "description": "The function to use when retrieving the number of active voice connections, using the client as a parameter",
          "optional": true,
          "type": [
            [
              ["PromiseResolvable", "<"],
              ["number", ">"]
            ]
          ]
        }
      ]
    },
    {
      "name": "Shard",
      "description": "A shard that is used when posting to services.",
      "meta": { "line": 49, "file": "Constants.ts", "path": "src/Utils" },
      "props": [
        {
          "name": "count",
          "optional": true,
          "type": [[["undefined", " | "], ["number"]]]
        },
        {
          "name": "id",
          "optional": true,
          "type": [[["undefined", " | "], ["number"]]]
        }
      ]
    },
    {
      "name": "CustomEvent",
      "description": "An event that can be added an handler for. These are the available events:\n* autopost\n* autopostfail\n* post\n* postfail",
      "type": [
        [
          ["'autopost'", " | "],
          ["'autopostfail'", " | "],
          ["'post'", " | "],
          ["'postfail'"]
        ]
      ],
      "meta": { "line": 123, "file": "Constants.ts", "path": "src/Utils" }
    },
    {
      "name": "CustomService",
      "description": "A mock of a {@link Service} that only consists of the nessessities for a poster to use it.\n<warn>When you're passing your custom services to method in this package, remmeber to use pass the actual service class, not an instance of it.</warn>",
      "see": [],
      "type": [[["any"]]],
      "meta": { "line": 92, "file": "Constants.ts", "path": "src/Utils" }
    },
    {
      "name": "Library",
      "description": "A library supported by the package. Here are the available libraries:\n* discord.js\n* discord.io\n* discordie\n* eris",
      "type": [
        [
          ["'discord", "."],
          ["js'", " | "],
          ["'discord", "."],
          ["io'", " | "],
          ["'discordie'", " | "],
          ["'eris'"]
        ]
      ],
      "meta": { "line": 108, "file": "Constants.ts", "path": "src/Utils" }
    },
    {
      "name": "Query",
      "description": "An object with all query parameters",
      "type": [
        [
          ["Record", "<"],
          ["string", ", "],
          ["string", " | "],
          ["number", ">"]
        ]
      ],
      "meta": { "line": 76, "file": "Constants.ts", "path": "src/Utils" }
    },
    {
      "name": "Service",
      "description": "A {@link ServiceBase} key supported by the package.\nThis can also includes keys from {@link CustomService}s and can be `custom` if a {@link Poster} has a custom post function.",
      "see": [
        "{@link https://dbots.js.org/#/docs/main/master/general/services}\n"
      ],
      "type": [[["string"]]],
      "meta": { "line": 99, "file": "Constants.ts", "path": "src/Utils" }
    },
    {
      "name": "eventHandler",
      "type": [
        [
          ["("],
          ["result", ": "],
          ["object", " | "],
          ["Array", "<"],
          ["object", ">) => "],
          ["void"]
        ]
      ],
      "meta": { "line": 114, "file": "Constants.ts", "path": "src/Utils" },
      "params": [
        {
          "name": "result",
          "type": [
            [
              ["object", " | "],
              ["Array", "<"],
              ["object", ">"]
            ]
          ]
        }
      ],
      "returns": [[["void"]]]
    },
    {
      "name": "PromiseResolvable",
      "description": "Data that can be resolved to give a string. This can either be a Function or a Promise.",
      "type": [
        [
          ["stringCallback", " | "],
          ["eventHandler", " | "],
          ["Promise", "<"],
          ["T", ">"]
        ]
      ],
      "meta": { "line": 7, "file": "EnsurePromise.ts", "path": "src/Utils" }
    },
    {
      "name": "stringCallback",
      "type": [
        [["("], ["args", ": "], ["Array", "<"], ["any", ">) => "], ["string"]]
      ],
      "meta": { "line": 4, "file": "EnsurePromise.ts", "path": "src/Utils" },
      "params": [
        {
          "name": "args",
          "type": [
            [
              ["Array", "<"],
              ["any", ">"]
            ]
          ]
        }
      ],
      "returns": [[["string"]]]
    },
    {
      "name": "RequestForm",
      "access": "private",
      "meta": { "line": 22, "file": "FormatRequest.ts", "path": "src/Utils" },
      "props": [
        {
          "name": "data",
          "description": "The data to send with the request, if the method allows it",
          "optional": true,
          "type": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["any", ">"]
            ]
          ]
        },
        {
          "name": "headers",
          "description": "The headers to append to the request",
          "optional": true,
          "type": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["string", ">"]
            ]
          ]
        },
        {
          "name": "method",
          "description": "The method to use",
          "optional": true,
          "type": [
            [
              ["AxiosRequestConfig", "["],
              ["'method'", "]"]
            ]
          ]
        },
        {
          "name": "params",
          "description": "The query parameters for the request",
          "optional": true,
          "type": [
            [
              ["Record", "<"],
              ["string", ", "],
              ["string", " | "],
              ["number", " | "],
              ["boolean", ">"]
            ]
          ]
        },
        {
          "name": "url",
          "description": "The URL for the request",
          "type": [[["string"]]]
        }
      ]
    },
    {
      "name": "AnyObject",
      "description": "Just a utility type representing an object",
      "type": [
        [
          ["Record", "<"],
          ["string", ", "],
          ["any", ">"]
        ]
      ],
      "meta": { "line": 19, "file": "Util.ts", "path": "src/Utils" }
    },
    {
      "name": "CountResolvable",
      "description": "Data that can be resolved to give a finite and positive integer.\nThis can include any value that can be parsed into an integer.",
      "type": [[["any"]]],
      "meta": { "line": 16, "file": "Util.ts", "path": "src/Utils" }
    },
    {
      "name": "IDResolvable",
      "description": "Data that can be resolved to give a Discord ID, this can be:\n* A string\n* A number\n* Any value with an `id` key",
      "type": [
        [
          ["string", " | "],
          ["number", " | "],
          ["Record", "<"],
          ["'id'", ", "],
          ["string", ">"]
        ]
      ],
      "meta": { "line": 10, "file": "Util.ts", "path": "src/Utils" }
    }
  ]
}
